//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Console_Velib_Events.SubService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SubService.ISubscriberService", CallbackContract=typeof(Console_Velib_Events.SubService.ISubscriberServiceCallback))]
    public interface ISubscriberService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/Service", ReplyAction="http://tempuri.org/ISubscriberService/ServiceResponse")]
        void Service(string contract, string station, int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/Service", ReplyAction="http://tempuri.org/ISubscriberService/ServiceResponse")]
        System.Threading.Tasks.Task ServiceAsync(string contract, string station, int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/SubscribeEvent", ReplyAction="http://tempuri.org/ISubscriberService/SubscribeEventResponse")]
        void SubscribeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/SubscribeEvent", ReplyAction="http://tempuri.org/ISubscriberService/SubscribeEventResponse")]
        System.Threading.Tasks.Task SubscribeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/SubscribeFinishedEvent", ReplyAction="http://tempuri.org/ISubscriberService/SubscribeFinishedEventResponse")]
        void SubscribeFinishedEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/SubscribeFinishedEvent", ReplyAction="http://tempuri.org/ISubscriberService/SubscribeFinishedEventResponse")]
        System.Threading.Tasks.Task SubscribeFinishedEventAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscriberServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscriberService/Subscribe")]
        void Subscribe(string contract, string station, int delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscriberService/SubscribeFinished")]
        void SubscribeFinished();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscriberServiceChannel : Console_Velib_Events.SubService.ISubscriberService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriberServiceClient : System.ServiceModel.DuplexClientBase<Console_Velib_Events.SubService.ISubscriberService>, Console_Velib_Events.SubService.ISubscriberService {
        
        public SubscriberServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SubscriberServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SubscriberServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriberServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriberServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Service(string contract, string station, int delay) {
            base.Channel.Service(contract, station, delay);
        }
        
        public System.Threading.Tasks.Task ServiceAsync(string contract, string station, int delay) {
            return base.Channel.ServiceAsync(contract, station, delay);
        }
        
        public void SubscribeEvent() {
            base.Channel.SubscribeEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeEventAsync() {
            return base.Channel.SubscribeEventAsync();
        }
        
        public void SubscribeFinishedEvent() {
            base.Channel.SubscribeFinishedEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeFinishedEventAsync() {
            return base.Channel.SubscribeFinishedEventAsync();
        }
    }
}
